*********************************
B. Datastructures Array, hash etc.
*********************************

0.)
Link for refernces in perl
http://search.cpan.org/~rjbs/perl-5.18.2/pod/perlreftut.pod

1.) #IMP#
Comparing two hashes after checking keys.

for ( keys %hash1 ) {
    unless ( exists $hash2{$_} ) {
        print "$_: not found in second hash\n";
        next;
    }

    if ( $hash1{$_} eq $hash2{$_} ) {
        print "$_: values are equal\n";
    }
    else {
        print "$_: values are not equal\n";
    }
}


2.)
Searching in an array

foreach $num (@subactionId) 
{
	if ( $num eq $terminateSubscription ) 
	{
		print "found through foreach\n";
	}
}

for (@subactionId) 
{
	if ( $_ eq $terminateSubscription ) 
	{
		print "found through for\n";
	}
}

if ( grep { $_ eq $terminateSubscription } @subactionId ) 
{
	print "found through grep \n";
    $isTermLastCCAMobile = 1;
}


3.)
Lists in Perl are not data structures, they are positions in the source code, 
determined by the context around them. Lists are basically the transient 
structures that Perl uses to move data around. You interact with them with all 
of Perl's syntax, but you can not work with them as a data type. 
The data type that is closest to a list is an array.

my @var    =    (1, 2, 3);

To loop thru this we need to do this
for $elem (@array2) {
    print $elem."\n";
}

4.)
Since the [...] construct creates a scalar, you should hold it in a scalar:
The square brackets are used to create an anonymous array. 
When evaluated, it returns a reference to this array, not the actual array values.

my $array = [1, 2, 3]; 

Creates a reference to an array with three elements

To loop thru such we need to do this:
for my $elem (@$array) {   # lexical loop variable
    print $elem."\n";
}


5.)
my @array = 1,2,3;

Is actually evaluated like this:

my @array = 1;
2,3; # causes the warning "Useless use of constant in void context"

because the = operator has higher precedence than the commas. 
So to get around that, we use parentheses

#IMP#
example:
lokeshpurohit@lokeshpurohit ~/perl/learn
$ perl -e '$n = 1,2,3; print $n;'
1
lokeshpurohit@lokeshpurohit ~/perl/learn
$ perl -e '$n = (1,2,3); print $n;'
3
lokeshpurohit@lokeshpurohit ~/perl/learn
$ perl -e '($n) = (1,2,3); print $n;'
1



6.)
Important difference between Array and Lists:

1. Array are variables Lists are not.
my @foo = ( 4, 5, 6 );

my %hash = ( foo => 42, bar => 43, baz => 44 ); OR my %hash = ( 'foo', 42, 'bar', 43, 'baz', 44 );

2. Array can be modified

3. Arrays can have names

4. Arrays can be referenced.  #IMP
perl -le 'print for \( 4, 5, 6 );'
SCALAR(0x7f9c3a82a138)
SCALAR(0x7f9c3a82a150)
SCALAR(0x7f9c3a82a168)

What's going on here? When you apply the reference operator (\) on a list, 
the result is a new list which distributes the reference operator 
over all of its items. Thus, the expression
	
\( 4, 5, 6 )

is equivalent to

( \4, \5, \6 )

5. Lists can be passed to and returned from subroutines.

6. Arrays can be multidimensional #IMP#
my @first_row = ( 1, 2, 3 );
my @second_row = ( 4, 5, 6 );
my @multi = ( \@first_row, \@second_row );

print $multi[1][2];    # prints 6

Lists are always one-dimensional. 

( 'foo', 'bar', ( 'baz', 'quux' ) )
That's exactly equivalent to 
( 'foo', 'bar', 'baz', 'quux' )


7.)
loop thru an array and assign a variable
        foreach my $outline (@$out) {
            if ($outline eq "User Principal : root\n") {
                $target_identity = (split(":", $prev_line))[1];
                chomp $target_identity;
                last;
            }
            $prev_line = $outline;
        }
        
8.) #IMP#
 delete deletes the specified elements from that hash 
 so that exists() on that element no longer returns true. 
 
 %hash = (foo => 11, bar => 22, baz => 33);
 $scalar = delete $hash{foo};         # $scalar is 11

%words = (1,2,3,4,5);

delete($words{5});

if (exists($words{5}))
{
    print "Exist\n";
    }
else {
    print "Not exist\n";
}
 
o/p:
Not exist 
In list context, returns the value or values deleted, 
or the last such element in scalar context. 

delete() may also be used on arrays 
deleting array elements never changes indices of existing values #IMP

9.)
List of hashes assigned to an array

my @students = ( { name         => 'Clara',
                   registration => 10405,
                   grades       => [ 2, 3, 2 ] },
                 { name         => 'Amy',
                   registration => 47200,
                   grades       => [ 1, 3, 1 ] },
                 { name         => 'Deborah',
                   registration => 12022,
                   grades       => [ 4, 4, 4 ] } );
                   
# To de reference this use ->

# print out names of all students
foreach my $student (@students) {
    print $student->{name} . "\n";
}

# print out Clara's second grade
print $students[0]->{grades}->[1];

# delete Clara's registration code
delete $students[0]->{registration};

#anonymousHash.pl#

10.) #IMP#
Accessing array using reference
my @colours = ("Red", "Orange", "Yellow", "Green", "Blue");
my $arrayRef = \@colours;

print $colours[0];       # direct array access
print ${ $arrayRef }[0]; # use the reference to get to the array
print $arrayRef->[0];    # exactly the same thing


11.) #IMP#
Accessing hash using reference

my %atomicWeights = ("Hydrogen" => 1.008, "Helium" => 4.003, "Manganese" => 54.94);
my $hashRef = \%atomicWeights;

print $atomicWeights{"Helium"}; # direct hash access
print ${ $hashRef }{"Helium"};  # use a reference to get to the hash
print $hashRef->{"Helium"};     # exactly the same thing - this is very common

12.)
A complete data structure:

# hash 
my %owner1 = (
	"name" => "Santa Claus",
	"DOB"  => "1882-12-25",
);

# ref to that hash
my $owner1Ref = \%owner1;

my %owner2 = (
	"name" => "Mickey Mouse",
	"DOB"  => "1928-11-18",
);

my $owner2Ref = \%owner2;

# Array of references of hash
my @owners = ( $owner1Ref, $owner2Ref );


# Reference to above array
my $ownersRef = \@owners;

# Complet data structure
my %account = (
	"number" => "12345678",
	"opened" => "2000-01-01",
	"owners" => $ownersRef,
);


13.) #IMP #INT
Anonymous hash using brace
# Braces denote an anonymous hash
my $owner1Ref = {
	"name" => "Santa Claus",
	"DOB"  => "1882-12-25",
};

# Square brackets denote an anonymous array
my $ownersRef = [ $owner1Ref, $owner2Ref ];

14.) 
Best way to use a complex data structure
form you should actually use when declaring complex data structures in-line

my %account = (
	"number" => "31415926",
	"opened" => "3000-01-01",
	"owners" => [
		{
			"name" => "Philip Fry",
			"DOB"  => "1974-08-06",
		},
		{
			"name" => "Hubert Farnsworth",
			"DOB"  => "2841-04-09",
		},
	],
);

15.)
About array, anonymous array and scalar reference to anonymous array

This array has five elements:

my @array1 = (1, 2, 3, 4, 5);
print @array1; # "12345"


This array, however, has ONE element (which happens to be a reference to an anonymous, five-element array):

my @array2 = [1, 2, 3, 4, 5];
print @array2; # e.g. "ARRAY(0x182c180)"


This scalar is a reference to an anonymous, five-element array:

my $array3Ref = [1, 2, 3, 4, 5];
print $array3Ref;      # e.g. "ARRAY(0x22710c0)"
print @{ $array3Ref }; # "12345"
print @$array3Ref;     # "12345"

16.) #IMP
This is the code that will return all the indices in the array 
where an element we are searching for is found.

my( @index )= grep { $allMyWords[$_] eq $word } 0..$#allMyWords;
print "Index : @index\n"; 

17.)
You can generate a list of [ index => value ] pairs:

my @b = map [ $_ => $a[$_] ],
    grep { $a[$_] =~ /^ba/ }
    0 .. $#a;
    
18.)
print qq|The path is c:\\programs\\new|;
print 'The path is c:\programs\new';
print "The path is c:\\programs\\new"; 

will all print
print "The path is c:\\programs\\new"; 

19.)
#!/usr/bin/perl -w

@array        = ("a", "e", "i", "o", "u");
@removedItems = splice(@array, 0 , 3, ("A", "E", "I"));

print "Removed items: @removedItems\n";

When above code is executed, it produced following result

Removed items: a e i
