1.)
 when we click a hyper link available on a web page to browse a particular web page or URL.

    -Your browser contacts web server using HTTP protocol and demands for the URL ie. web page filename.

    -Web Server will check the URL and will look for the filename requested. 
	If web server finds that file then it sends the file back to the browser without any further 
	execution otherwise sends an error message indicating that you have requested a wrong file.

    -Web browser takes response from web server and displays either the received file content 
	or an error message in case file is not found.

	it is possible to set up HTTP server in such a way so that whenever a file in a certain directory 
	is requested that file is not sent back; instead it is executed as a program, and whatever that 
	program outputs as a result, that is sent back for your browser to display. This can be done by using 
	a special functionality available in the web server and it is called Common Gateway Interface

2.)
All the CGI programs to be executed by the web server are kept in a pre-configured directory. 
This directory is called CGI directory and by convention it is named as /cgi-bin. 
By convention Perl CGI files will have extention as .cgi.	

3.) hello.cgi
#!/usr/bin/perl

print "Content-type:text/html\r\n\r\n";
print '<html>';
print '<head>';
print '<title>Hello Word - First CGI Program</title>';
print '</head>';
print '<body>';
print '<h2>Hello Word! This is my first CGI program</h2>';
print '</body>';
print '</html>';

1;

#IMP# here is one important and extra feature available which is first line to be printed 
Content-type:text/html\r\n\r\n. 
This line is sent back to the browser and specifies the content type to be displayed on the browser screen.

4.)
 All the HTTP header will be in the following form
HTTP Field Name: Field Content
eg:
Content-type:text/html\r\n\r\n
Header					Description
Content-type: String	A MIME string defining the format of the content being returned. Example is Content-type:text/html
Expires: Date String	The date when the information becomes invalid. This should be used by the browser to decide when a 
						page needs to be refreshed. A valid date string should be in the format 01 Jan 1998 12:00:00 GMT.
Location: URL String	The URL that should be returned instead of the URL requested. 
						You can use this filed to redirect a request to any other location.
Last-modified: String	The date of last modification of the file.
Content-length: String	The length, in bytes, of the data being returned. 
						The browser uses this value to report the estimated download time for a file.
Set-Cookie: String		Set the cookie passed through the string

5.)
Environment variables: All the CGI program will have access to the environment variables
Variable Names		Description
CONTENT_TYPE		The data type of the content. 
					Used when the client is sending attached content to the server. For example file upload etc.
CONTENT_LENGTH		The length of the query information. It's available only for POST requests
HTTP_COOKIE			Return the set cookies in the form of key & value pair.
HTTP_USER_AGENT		The User-Agent request-header field contains information about the user agent originating the request. Its name of the web browser.
PATH_INFO			The path for the CGI script.
QUERY_STRING		The URL-encoded information that is sent with GET method request.
REMOTE_ADDR			The IP address of the remote host making the request. This can be useful for logging or for authentication purpose.
REMOTE_HOST			The fully qualified name of the host making the request. If this information is not available then REMOTE_ADDR can be used to get IR address.
REQUEST_METHOD		The method used to make the request. The most common methods are GET and POST.
SCRIPT_FILENAME		The full path to the CGI script.
SCRIPT_NAME			The name of the CGI script.
SERVER_NAME			The server's hostname or IP Address
SERVER_SOFTWARE		The name and version of the software the server is running.

eg:
#!/usr/bin/perl

print "Content-type: text/html\n\n";
print "<font size=+1>Environment</font>\n";
foreach (sort keys %ENV)
{
  print "<b>$_</b>: $ENV{$_}<br>\n";
}

1;

6.)
---Raise a "File Download" Dialog Box---
#!/usr/bin/perl

# HTTP Header
print "Content-Type:application/octet-stream; name=\"FileName\"\r\n";
print "Content-Disposition: attachment; filename=\"FileName\"\r\n\n";

# Actual File Content will go hear.
open( FILE, "<FileName" );
while(read(FILE, $buffer, 100) )
{
   print("$buffer");
}

7.)
Get Method:
 sends the encoded user information appended to the page URL itself. 
 The page and the encoded information are separated by the ? character as follows:
http://www.test.com/cgi-bin/hello.cgi?key1=value1&key2=value2

This information is passed using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING 
environment variable which you can parse and use in your CGI program.

You can pass information by simply concatenating key and value pairs alongwith any URL 
or you can use HTML <FORM> tags to pass information using GET method.

8.) #IMP Get Method example
URL which will pass two values to hello_get.cgi program using GET method.
http://www.tutorialspoint.com/cgi-bin/hello_get.cgi?first_name=ZARA&last_name=ALI

Below is hello_get.cgi script to handle input given by web browser.

#!/usr/bin/perl

local ($buffer, @pairs, $pair, $name, $value, %FORM);
# Read in text
$ENV{'REQUEST_METHOD'} =~ tr/a-z/A-Z/;
if ($ENV{'REQUEST_METHOD'} eq "GET")
{
   $buffer = $ENV{'QUERY_STRING'};
}
# Split information into name/value pairs
@pairs = split(/&/, $buffer);
foreach $pair (@pairs)
{
   ($name, $value) = split(/=/, $pair);
   $value =~ tr/+/ /;
   $value =~ s/%(..)/pack("C", hex($1))/eg;
   $FORM{$name} = $value;
}
$first_name = $FORM{first_name};
$last_name  = $FORM{last_name};

print "Content-type:text/html\r\n\r\n";
print "<html>";
print "<head>";
print "<title>Hello - Second CGI Program</title>";
print "</head>";
print "<body>";
print "<h2>Hello $first_name $last_name - Second CGI Program</h2>";
print "</body>";
print "</html>";

1;

9.)
To run perl cgi from windows

A.
On windows need to uncomment below from Apache Software Foundation\Tomcat 8.0\conf\web.xml file
    <servlet>
        <servlet-name>cgi</servlet-name>
        <servlet-class>org.apache.catalina.servlets.CGIServlet</servlet-class>
        <init-param>
          <param-name>debug</param-name>
          <param-value>0</param-value>
        </init-param>
        <init-param>
          <param-name>cgiPathPrefix</param-name>
          <param-value>WEB-INF/cgi</param-value>
        </init-param>
         <load-on-startup>5</load-on-startup>
    </servlet>

	AND below too
    <servlet-mapping>
        <servlet-name>cgi</servlet-name>
        <url-pattern>/cgi-bin/*</url-pattern>
    </servlet-mapping>
	
B.
Rename the CGI jars supplied with (but disabled) in Tomcat

Code:
cd /usr/local/tomcat/server/lib
mv servlets-ssi.renametojar servlets-ssi.jar
mv servlets-cgi.renametojar servlets-cgi.jar

C.
In your webapps/xxxx/WEB-INF folder, add a new directory called cgi and place your CGI script in there.

D.
Then restart Tomcat to ensure it's picked up the new, global, web.xml file.	

10.)
Simple FORM Example: GET Method

Here is a simple example which passes two values using HTML FORM and submit button.

<FORM action="/cgi-bin/hello_get.cgi" method="GET">
First Name: <input type="text" name="first_name">  <br>

Last Name: <input type="text" name="last_name">
<input type="submit" value="Submit">
</FORM>

11.)
POST method:
This packages the information in exactly the same way as GET methods, but instead of sending it as 
a text string after a ? in the URL, it sends it as a separate message as a part of HTTP header. 
Web server provides this message to the CGI script in the form of the standard input.

example: Below  script will handle GET as well as POST method.
#!/usr/bin/perl

local ($buffer, @pairs, $pair, $name, $value, %FORM);
# Read in text
$ENV{'REQUEST_METHOD'} =~ tr/a-z/A-Z/;
if ($ENV{'REQUEST_METHOD'} eq "POST")
{
   read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
}else {
   $buffer = $ENV{'QUERY_STRING'};
}
# Split information into name/value pairs
@pairs = split(/&/, $buffer);
foreach $pair (@pairs)
{
   ($name, $value) = split(/=/, $pair);
   $value =~ tr/+/ /;
   $value =~ s/%(..)/pack("C", hex($1))/eg;
   $FORM{$name} = $value;
}
$first_name = $FORM{first_name};
$last_name  = $FORM{last_name};

print "Content-type:text/html\r\n\r\n";
print "<html>";
print "<head>";
print "<title>Hello - Second CGI Program</title>";
print "</head>";
print "<body>";
print "<h2>Hello $first_name $last_name - Second CGI Program</h2>";
print "</body>";
print "</html>";

1;

12.)
Using cookies:
HTTP protocol is a stateless protocol. the most efficient method of remembering and tracking preferences, 
purchases, commissions, and other information required for better visitor experience or site statistics.

how it works: #IMP
-------------
Your server sends some data to the visitor's browser in the form of a cookie. 
The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. 
Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. 
Once retrieved, your server knows/remembers what was stored.

Example: #IMP
--------
Assuming you want to set UserID and Password as cookies. So it will be done as follows

#!/usr/bin/perl

print "Set-Cookie:UserID=XYZ;\n";
print "Set-Cookie:Password=XYZ123;\n";
print "Set-Cookie:Expires=Tuesday, 31-Dec-2007 23:12:40 GMT";\n";
print "Set-Cookie:Domain=www.tutorialspoint.com;\n";
print "Set-Cookie:Path=/perl;\n";
print "Content-type:text/html\r\n\r\n";
...........Rest of the HTML Content goes here....

It is important to note that cookies are set before sending magic line "Content-type:text/html\r\n\r\n. #IMP

Retrieving cookies
------------------
This is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form.

key1=value1;key2=value2;key3=value3....

Here is an example of how to retrieving cookies.
#!/usr/bin/perl
$rcvd_cookies = $ENV{'HTTP_COOKIE'};
@cookies = split /;/, $rcvd_cookies;
foreach $cookie ( @cookies ){
   ($key, $val) = split(/=/, $cookie); # splits on the first =.
   $key =~ s/^\s+//;
   $val =~ s/^\s+//;
   $key =~ s/\s+$//;
   $val =~ s/\s+$//;
   if( $key eq "UserID" ){
      $user_id = $val;
   }elsif($key eq "Password"){
      $password = $val;
   }
}
print "User ID  = $user_id\n";
print "Password = $password\n";
